import random
import time
import os
from nextcord.ext import commands, tasks

bot = commands.Bot()
channel = int(os.getenv('CHANNEL'))
token = os.getenv('TOKEN')



keno_numbers = ["<:1_:1134852259147169863>",
                "<:2_:1134852270585020448>",
                "<:3_:1134852303954903041>",
                "<:4_:1134852328374141008>",
                "<:5_:1134852331658293350>",
                "<:6_:1134852336007790632>",
                "<:7_:1134852337958137916>",
                "<:8_:1134852363656634388>",
                "<:9_:1134852367041450084>",
                "<:10:1134852368886931668>",
                "<:11:1134852371969749113>",
                "<:12:1134852373550993449>",
                "<:13:1134852378407993474>",
                "<:14:1134852383822856272>",
                "<:15:1134852387610296393>",
                "<:16:1134852389392875600>",
                "<:17:1134852392718975026>",
                "<:18:1134852395948585030>",
                "<:19:1134852398096076940>",
                "<:20:1134852401174679632>",
                "<:21:1134852402936299601>",
                "<:22:1134852464919715840>",
                "<:23:1134852466526130331>",
                "<:24:1134852470191964190>",
                "<:25:1134852473723564132>",
                "<:26:1134852477515210783>",
                "<:27:1134852479939522641>",
                "<:28:1134852483022327858>",
                "<:29:1134852486805590137>",
                "<:30:1134852488596557864>",
                "<:31:1134852492107202720>",
                "<:32:1134852494003019817>",
                "<:33:1134852496918052877>",
                "<:34:1134852500323836026>",
                "<:35:1134852502123204750>",
                "<:36:1134852505566724117>",
                "<:37:1134852507705823402>",
                "<:38:1134852510901883001>",
                "<:39:1134852513972105317>",
                "<:40:1134852515704352778>",
                "<:41:1134852610281717901>",
                "<:42:1134852611896508467>",
                "<:43:1134852615512006787>",
                "<:44:1134852618544492707>",
                "<:45:1134852620352229386>",
                "<:46:1134852624194207784>",
                "<:47:1134852626106830881>",
                "<:48:1134852629613252728>",
                "<:49:1134852632998051840>",
                "<:50:1134852636508700672>",
                "<:51:1134852638589063178>",
                "<:52:1134852642108100618>",
                "<:53:1134852645325123675>",
                "<:54:1134852647149637693>",
                "<:55:1134852650060496961>",
                "<:56:1134852651834671195>",
                "<:57:1134852654850396272>",
                "<:58:1134852656582639806>",
                "<:59:1134852659447349361>",
                "<:60:1134852662358188093>",
                "<:61:1134852666321813594>",
                "<:62:1134852668293140510>",
                "<:63:1134852671342391328>",
                "<:64:1134852674874003527>",
                "<:65:1134853036825645166>",
                "<:66:1134853038578876416>",
                "<:67:1134853041670066247>",
                "<:68:1134853044748689539>",
                "<:69:1134853046489333760>",
                "<:70:1134853049882517524>",
                "<:71:1134853090026201239>",
                "<:72:1134853091745861652>",
                "<:73:1134853098876174536>",
                "<:74:1134853101866717217>",
                "<:75:1134853105809367152>",
                "<:76:1134853109055754394>",
                "<:77:1134853110821572628>",
                "<:78:1135125558917869569>",
                "<:79:1135125573199482960>",
                "<:80:1135125585614614540>",]

def keno_cycle(): # this does a draw, and ensures no 2 numbers are the same
    keno_draw = []
    while len(keno_draw) < 20:
        new_number = random.randint(1,80)
        if new_number not in keno_draw:
            keno_draw.append(new_number)
    return keno_draw

def winner(keno_cycle): # this checks if heads or tails won, should be added to the bot message a little after the last number is drawn
    heads = len([i for i in keno_cycle if i < 40])
    tails = len([i for i in keno_cycle if i > 40])
    if heads > tails:
        winner = "Heads"
        return winner
    elif tails > heads:
        winner = "Tails"
        return winner
    else:
        winner = "Evens"
        return winner

def ht_shorten(number):
    if len(str(number)) == 1:
        final = (f" {number}")
        return final
    else: 
        final = (str(number))
        return final

@bot.event
async def on_ready():
    print(f"Logged in as {bot.user} (ID: {bot.user.id})")

@tasks.loop(count=1)
async def wait_until_ready():
    await bot.wait_until_ready()
    keno_channel = bot.get_channel(channel)
    gamenum = 0
    while True:
        if gamenum == 999:
            gamenum = 1
        else:
            gamenum +=1
        embedlist = ["<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>","<:e:1134852244114772008>"]
        heads = 0
        tails = 0
        board = ("\n".join(["".join(embedlist[i:i+10]) for i in range(0,len(embedlist),10)])) # prints blank board
        current_board = await keno_channel.send(f"`|　　　　　Game: {gamenum:03d}　　　　　|`\n{board}\n`|H:{ht_shorten(heads)}|T:{ht_shorten(tails)}|            |`")
        keno_draw = keno_cycle()
        for i in keno_draw: # iterates through the output made from the keno_cycle
            time.sleep(5) # waits before updating with the next drawn number
            embedlist[i-1] = str(keno_numbers[i-1]) # makes the drawn numbers emoji names replace the empty emoji names
            new_board = ("\n".join(["".join(embedlist[i:i+10]) for i in range(0,len(embedlist),10)])) # this is what outputs the list and ensures the rows are 10 numbers long
            if i <= 40:
                heads += 1
            elif i >= 40:
                tails += 1
            current_board = await current_board.edit(f"`|　　　　　Game: {gamenum:03d}　　　　　|`\n{new_board}\n`|H:{ht_shorten(heads)}|T:{ht_shorten(tails)}|            |`")
        ht_winner = winner(keno_draw)
        current_board = await current_board.edit(f"`|　　　　　Game: {gamenum:03d}　　　　　|`\n{new_board}\n`|H:{ht_shorten(heads)}|T:{ht_shorten(tails)}| {ht_winner} wins |`")
        print(keno_draw)
        time.sleep(40)



wait_until_ready.start()
bot.run(token)